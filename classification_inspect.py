import json
import argparse
import numpy
from matplotlib.figure import Figure
from matplotlib.table import Table, table
import matplotlib.pyplot as plt

parser = argparse.ArgumentParser()
parser.add_argument(
    "--counts",
    dest="counts",
    required=True,
    help="Counts file generated by apply script."
)
parser.add_argument(
    "--figure",
    dest="figure",
    required=True,
    help="Image file name to save figure to."
)
parser.add_argument(
    "--title",
    dest="title",
    help="Title for top of figure.",
    default="Confusion matrix between labels"
)
parser.add_argument(
    "--xlabel",
    dest="xlabel",
    help="Label for the x axis.",
    default="Correct label"
)
parser.add_argument(
    "--ylabel",
    dest="ylabel",
    help="Label for the y axis.",
    default="Guessed label"
)
args = parser.parse_args()

with open(args.counts, "rt") as ifd:
    output = json.loads(ifd.read())

prediction_counts = {}

seen_guesses = set()
seen_golds = set()
for item in output:
    gold = item["target"]
    seen_golds.add(gold)
    guess = item["prediction"]
    seen_guesses.add(guess)
    prediction_counts[gold] = prediction_counts.get(gold, {})
    prediction_counts[guess] = prediction_counts.get(guess, {})
    prediction_counts[guess][gold] = prediction_counts[guess].get(gold, 0) + 1.0

label_to_id = {l : i for i, l in enumerate([x for x in prediction_counts.keys() if x in seen_guesses and x in seen_golds])}
id_to_label = {v : k for k, v in label_to_id.items()}

confusion_matrix = numpy.zeros(shape=(len(label_to_id), len(label_to_id)))
for guess in label_to_id.keys():
    for gold in label_to_id.keys():
        count = prediction_counts[guess].get(gold, 0)
        confusion_matrix[label_to_id[gold], label_to_id[guess]] = count

confusion_matrix = confusion_matrix / confusion_matrix.sum(0)

fig = Figure(figsize=(10,20))
ax = fig.add_axes((.06,.62,.9,.33))
ax2 = fig.add_axes(
    (.06,.1,.9,.35),
    label="Example misclassifications",
    frameon=False,
    xticks=[],
    yticks=[]
)

ax.imshow(confusion_matrix)
ax.set_title(args.title, fontsize=25, fontweight="bold")
ax.set_xticks(
    numpy.arange(len(label_to_id)),
    labels=[id_to_label[i] for i in range(len(label_to_id))],
    fontsize=15,
    rotation=45
)
ax.set_yticks(
    numpy.arange(len(label_to_id)),
    labels=[id_to_label[i] for i in range(len(label_to_id))],
    fontsize=15
)
ax.set_xlabel(args.xlabel, fontsize=20)
ax.set_ylabel(args.ylabel, fontsize=20)

fig.savefig(args.figure)
